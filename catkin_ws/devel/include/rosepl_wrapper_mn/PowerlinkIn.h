// Generated by gencpp from file rosepl_wrapper_mn/PowerlinkIn.msg
// DO NOT EDIT!


#ifndef ROSEPL_WRAPPER_MN_MESSAGE_POWERLINKIN_H
#define ROSEPL_WRAPPER_MN_MESSAGE_POWERLINKIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosepl_wrapper_mn
{
template <class ContainerAllocator>
struct PowerlinkIn_
{
  typedef PowerlinkIn_<ContainerAllocator> Type;

  PowerlinkIn_()
    : shm_name()
    , pid(0)
    , cmdvel_lwheel(0)
    , cmdvel_rwheel(0)  {
    }
  PowerlinkIn_(const ContainerAllocator& _alloc)
    : shm_name(_alloc)
    , pid(0)
    , cmdvel_lwheel(0)
    , cmdvel_rwheel(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shm_name_type;
  _shm_name_type shm_name;

   typedef uint16_t _pid_type;
  _pid_type pid;

   typedef int64_t _cmdvel_lwheel_type;
  _cmdvel_lwheel_type cmdvel_lwheel;

   typedef int64_t _cmdvel_rwheel_type;
  _cmdvel_rwheel_type cmdvel_rwheel;





  typedef boost::shared_ptr< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> const> ConstPtr;

}; // struct PowerlinkIn_

typedef ::rosepl_wrapper_mn::PowerlinkIn_<std::allocator<void> > PowerlinkIn;

typedef boost::shared_ptr< ::rosepl_wrapper_mn::PowerlinkIn > PowerlinkInPtr;
typedef boost::shared_ptr< ::rosepl_wrapper_mn::PowerlinkIn const> PowerlinkInConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator2> & rhs)
{
  return lhs.shm_name == rhs.shm_name &&
    lhs.pid == rhs.pid &&
    lhs.cmdvel_lwheel == rhs.cmdvel_lwheel &&
    lhs.cmdvel_rwheel == rhs.cmdvel_rwheel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosepl_wrapper_mn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "084629ffa8e3d4d7e9182ff9bbabd096";
  }

  static const char* value(const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x084629ffa8e3d4d7ULL;
  static const uint64_t static_value2 = 0xe9182ff9bbabd096ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosepl_wrapper_mn/PowerlinkIn";
  }

  static const char* value(const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Generated with epl_ros_generator.py\n"
"\n"
"# openPOWERLINK variables:\n"
"string shm_name\n"
"uint16 pid\n"
"\n"
"# xap.h variables:\n"
"int64 cmdvel_lwheel\n"
"int64 cmdvel_rwheel\n"
"\n"
;
  }

  static const char* value(const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.shm_name);
      stream.next(m.pid);
      stream.next(m.cmdvel_lwheel);
      stream.next(m.cmdvel_rwheel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerlinkIn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosepl_wrapper_mn::PowerlinkIn_<ContainerAllocator>& v)
  {
    s << indent << "shm_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shm_name);
    s << indent << "pid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pid);
    s << indent << "cmdvel_lwheel: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cmdvel_lwheel);
    s << indent << "cmdvel_rwheel: ";
    Printer<int64_t>::stream(s, indent + "  ", v.cmdvel_rwheel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSEPL_WRAPPER_MN_MESSAGE_POWERLINKIN_H
