// Generated by gencpp from file rosepl_wrapper_cn/SdoTransferRequest.msg
// DO NOT EDIT!


#ifndef ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERREQUEST_H
#define ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosepl_wrapper_cn
{
template <class ContainerAllocator>
struct SdoTransferRequest_
{
  typedef SdoTransferRequest_<ContainerAllocator> Type;

  SdoTransferRequest_()
    : action(0)
    , pid(0)
    , node(0)
    , index(0)
    , subindex(0)
    , write(false)
    , data(0)
    , size(0)  {
    }
  SdoTransferRequest_(const ContainerAllocator& _alloc)
    : action(0)
    , pid(0)
    , node(0)
    , index(0)
    , subindex(0)
    , write(false)
    , data(0)
    , size(0)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type;
  _action_type action;

   typedef uint16_t _pid_type;
  _pid_type pid;

   typedef uint8_t _node_type;
  _node_type node;

   typedef uint16_t _index_type;
  _index_type index;

   typedef uint16_t _subindex_type;
  _subindex_type subindex;

   typedef uint8_t _write_type;
  _write_type write;

   typedef uint64_t _data_type;
  _data_type data;

   typedef uint16_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SdoTransferRequest_

typedef ::rosepl_wrapper_cn::SdoTransferRequest_<std::allocator<void> > SdoTransferRequest;

typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferRequest > SdoTransferRequestPtr;
typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferRequest const> SdoTransferRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.pid == rhs.pid &&
    lhs.node == rhs.node &&
    lhs.index == rhs.index &&
    lhs.subindex == rhs.subindex &&
    lhs.write == rhs.write &&
    lhs.data == rhs.data &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosepl_wrapper_cn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fbde0efc1b1fd34aa49e7dc50b9f72c";
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fbde0efc1b1fd34ULL;
  static const uint64_t static_value2 = 0xaa49e7dc50b9f72cULL;
};

template<class ContainerAllocator>
struct DataType< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosepl_wrapper_cn/SdoTransferRequest";
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 action\n"
"uint16 pid\n"
"uint8 node\n"
"uint16 index\n"
"uint16 subindex\n"
"bool write\n"
"uint64 data\n"
"uint16 size\n"
;
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.pid);
      stream.next(m.node);
      stream.next(m.index);
      stream.next(m.subindex);
      stream.next(m.write);
      stream.next(m.data);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SdoTransferRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosepl_wrapper_cn::SdoTransferRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "pid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pid);
    s << indent << "node: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.node);
    s << indent << "index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.index);
    s << indent << "subindex: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.subindex);
    s << indent << "write: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.write);
    s << indent << "data: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.data);
    s << indent << "size: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERREQUEST_H
