// Generated by gencpp from file rosepl_wrapper_cn/SdoTransferResponse.msg
// DO NOT EDIT!


#ifndef ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERRESPONSE_H
#define ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosepl_wrapper_cn
{
template <class ContainerAllocator>
struct SdoTransferResponse_
{
  typedef SdoTransferResponse_<ContainerAllocator> Type;

  SdoTransferResponse_()
    : error(0)
    , data(0)
    , is_ready(false)  {
    }
  SdoTransferResponse_(const ContainerAllocator& _alloc)
    : error(0)
    , data(0)
    , is_ready(false)  {
  (void)_alloc;
    }



   typedef uint16_t _error_type;
  _error_type error;

   typedef uint64_t _data_type;
  _data_type data;

   typedef uint8_t _is_ready_type;
  _is_ready_type is_ready;





  typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SdoTransferResponse_

typedef ::rosepl_wrapper_cn::SdoTransferResponse_<std::allocator<void> > SdoTransferResponse;

typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferResponse > SdoTransferResponsePtr;
typedef boost::shared_ptr< ::rosepl_wrapper_cn::SdoTransferResponse const> SdoTransferResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator2> & rhs)
{
  return lhs.error == rhs.error &&
    lhs.data == rhs.data &&
    lhs.is_ready == rhs.is_ready;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator1> & lhs, const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosepl_wrapper_cn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3217e5ce40be2c02ca45c6aec3ad489";
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3217e5ce40be2c0ULL;
  static const uint64_t static_value2 = 0x2ca45c6aec3ad489ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosepl_wrapper_cn/SdoTransferResponse";
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 error\n"
"uint64 data\n"
"bool is_ready\n"
;
  }

  static const char* value(const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error);
      stream.next(m.data);
      stream.next(m.is_ready);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SdoTransferResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosepl_wrapper_cn::SdoTransferResponse_<ContainerAllocator>& v)
  {
    s << indent << "error: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.error);
    s << indent << "data: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.data);
    s << indent << "is_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ready);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSEPL_WRAPPER_CN_MESSAGE_SDOTRANSFERRESPONSE_H
