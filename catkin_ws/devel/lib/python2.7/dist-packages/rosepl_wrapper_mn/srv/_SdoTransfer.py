# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosepl_wrapper_mn/SdoTransferRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SdoTransferRequest(genpy.Message):
  _md5sum = "7fbde0efc1b1fd34aa49e7dc50b9f72c"
  _type = "rosepl_wrapper_mn/SdoTransferRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 action
uint16 pid
uint8 node
uint16 index
uint16 subindex
bool write
uint64 data
uint16 size
"""
  __slots__ = ['action','pid','node','index','subindex','write','data','size']
  _slot_types = ['uint8','uint16','uint8','uint16','uint16','bool','uint64','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action,pid,node,index,subindex,write,data,size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SdoTransferRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action is None:
        self.action = 0
      if self.pid is None:
        self.pid = 0
      if self.node is None:
        self.node = 0
      if self.index is None:
        self.index = 0
      if self.subindex is None:
        self.subindex = 0
      if self.write is None:
        self.write = False
      if self.data is None:
        self.data = 0
      if self.size is None:
        self.size = 0
    else:
      self.action = 0
      self.pid = 0
      self.node = 0
      self.index = 0
      self.subindex = 0
      self.write = False
      self.data = 0
      self.size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BHB2HBQH().pack(_x.action, _x.pid, _x.node, _x.index, _x.subindex, _x.write, _x.data, _x.size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.action, _x.pid, _x.node, _x.index, _x.subindex, _x.write, _x.data, _x.size,) = _get_struct_BHB2HBQH().unpack(str[start:end])
      self.write = bool(self.write)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BHB2HBQH().pack(_x.action, _x.pid, _x.node, _x.index, _x.subindex, _x.write, _x.data, _x.size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.action, _x.pid, _x.node, _x.index, _x.subindex, _x.write, _x.data, _x.size,) = _get_struct_BHB2HBQH().unpack(str[start:end])
      self.write = bool(self.write)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BHB2HBQH = None
def _get_struct_BHB2HBQH():
    global _struct_BHB2HBQH
    if _struct_BHB2HBQH is None:
        _struct_BHB2HBQH = struct.Struct("<BHB2HBQH")
    return _struct_BHB2HBQH
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosepl_wrapper_mn/SdoTransferResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SdoTransferResponse(genpy.Message):
  _md5sum = "e3217e5ce40be2c02ca45c6aec3ad489"
  _type = "rosepl_wrapper_mn/SdoTransferResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 error
uint64 data
bool is_ready
"""
  __slots__ = ['error','data','is_ready']
  _slot_types = ['uint16','uint64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error,data,is_ready

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SdoTransferResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = 0
      if self.data is None:
        self.data = 0
      if self.is_ready is None:
        self.is_ready = False
    else:
      self.error = 0
      self.data = 0
      self.is_ready = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HQB().pack(_x.error, _x.data, _x.is_ready))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.error, _x.data, _x.is_ready,) = _get_struct_HQB().unpack(str[start:end])
      self.is_ready = bool(self.is_ready)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HQB().pack(_x.error, _x.data, _x.is_ready))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.error, _x.data, _x.is_ready,) = _get_struct_HQB().unpack(str[start:end])
      self.is_ready = bool(self.is_ready)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HQB = None
def _get_struct_HQB():
    global _struct_HQB
    if _struct_HQB is None:
        _struct_HQB = struct.Struct("<HQB")
    return _struct_HQB
class SdoTransfer(object):
  _type          = 'rosepl_wrapper_mn/SdoTransfer'
  _md5sum = '7e21ae9a3de205dc320e50907fc35cdc'
  _request_class  = SdoTransferRequest
  _response_class = SdoTransferResponse
